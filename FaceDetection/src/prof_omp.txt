k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.72      0.52     0.52      360     1.45     1.45  create_histogram
 22.42      0.67     0.15      378     0.40     0.40  read_pgm_file
  0.00      0.67     0.00     6156     0.00     0.00  distance
  0.00      0.67     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.67     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.67     0.00      342     0.00     0.00  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.49% of 0.67 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.67                 main [1]
                0.52    0.00     360/360         create_histogram [2]
                0.15    0.00     378/378         read_pgm_file [3]
                0.00    0.00     380/380         dealloc_2d_matrix [5]
                0.00    0.00     342/342         find_closest [7]
                0.00    0.00       1/379         alloc_2d_matrix [6]
-----------------------------------------------
                0.52    0.00     360/360         main [1]
[2]     77.6    0.52    0.00     360         create_histogram [2]
-----------------------------------------------
                0.15    0.00     378/378         main [1]
[3]     22.4    0.15    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00    6156/6156        find_closest [7]
[4]      0.0    0.00    0.00    6156         distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[5]      0.0    0.00    0.00     380         dealloc_2d_matrix [5]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[6]      0.0    0.00    0.00     379         alloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00     342/342         main [1]
[7]      0.0    0.00    0.00     342         find_closest [7]
                0.00    0.00    6156/6156        distance [4]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] alloc_2d_matrix         [5] dealloc_2d_matrix       [7] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 78.57      0.51     0.51      360     1.42     1.42  create_histogram
 20.03      0.64     0.13      396     0.33     0.33  read_pgm_file
  1.54      0.65     0.01    11664     0.00     0.00  distance
  0.00      0.65     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.65     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.65     0.00      324     0.00     0.03  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.54% of 0.65 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.65                 main [1]
                0.51    0.00     360/360         create_histogram [2]
                0.13    0.00     396/396         read_pgm_file [3]
                0.00    0.01     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.51    0.00     360/360         main [1]
[2]     78.5    0.51    0.00     360         create_histogram [2]
-----------------------------------------------
                0.13    0.00     396/396         main [1]
[3]     20.0    0.13    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00   11664/11664       find_closest [5]
[4]      1.5    0.01    0.00   11664         distance [4]
-----------------------------------------------
                0.00    0.01     324/324         main [1]
[5]      1.5    0.00    0.01     324         find_closest [5]
                0.01    0.00   11664/11664       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 74.73      0.50     0.50      360     1.39     1.39  create_histogram
 17.94      0.62     0.12      450     0.27     0.27  read_pgm_file
  7.47      0.67     0.05    24300     0.00     0.00  distance
  0.00      0.67     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.67     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.67     0.00      270     0.00     0.19  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.49% of 0.67 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.67                 main [1]
                0.50    0.00     360/360         create_histogram [2]
                0.12    0.00     450/450         read_pgm_file [3]
                0.00    0.05     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     360/360         main [1]
[2]     74.6    0.50    0.00     360         create_histogram [2]
-----------------------------------------------
                0.12    0.00     450/450         main [1]
[3]     17.9    0.12    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.05    0.00   24300/24300       find_closest [5]
[4]      7.5    0.05    0.00   24300         distance [4]
-----------------------------------------------
                0.00    0.05     270/270         main [1]
[5]      7.5    0.00    0.05     270         find_closest [5]
                0.05    0.00   24300/24300       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 71.53      0.50     0.50      360     1.39     1.39  create_histogram
 15.74      0.61     0.11      486     0.23     0.23  read_pgm_file
 12.88      0.70     0.09    29484     0.00     0.00  distance
  0.00      0.70     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.70     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.70     0.00      234     0.00     0.39  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.43% of 0.70 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.70                 main [1]
                0.50    0.00     360/360         create_histogram [2]
                0.11    0.00     486/486         read_pgm_file [3]
                0.00    0.09     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     360/360         main [1]
[2]     71.4    0.50    0.00     360         create_histogram [2]
-----------------------------------------------
                0.11    0.00     486/486         main [1]
[3]     15.7    0.11    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.09    0.00   29484/29484       find_closest [5]
[4]     12.9    0.09    0.00   29484         distance [4]
-----------------------------------------------
                0.00    0.09     234/234         main [1]
[5]     12.9    0.00    0.09     234         find_closest [5]
                0.09    0.00   29484/29484       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 65.37      0.47     0.47      360     1.31     1.31  create_histogram
 22.25      0.63     0.16      540     0.30     0.30  read_pgm_file
 12.52      0.72     0.09    32400     0.00     0.00  distance
  0.00      0.72     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.72     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.72     0.00      180     0.00     0.50  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.39% of 0.72 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.72                 main [1]
                0.47    0.00     360/360         create_histogram [2]
                0.16    0.00     540/540         read_pgm_file [3]
                0.00    0.09     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.47    0.00     360/360         main [1]
[2]     65.3    0.47    0.00     360         create_histogram [2]
-----------------------------------------------
                0.16    0.00     540/540         main [1]
[3]     22.2    0.16    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.09    0.00   32400/32400       find_closest [5]
[4]     12.5    0.09    0.00   32400         distance [4]
-----------------------------------------------
                0.00    0.09     180/180         main [1]
[5]     12.5    0.00    0.09     180         find_closest [5]
                0.09    0.00   32400/32400       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 76.30      0.48     0.48      355     1.35     1.35  create_histogram
 20.66      0.61     0.13      378     0.34     0.34  read_pgm_file
  3.18      0.63     0.02     6144     0.00     0.00  distance
  0.00      0.63     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      341     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.48    0.00     355/355         create_histogram [2]
                0.13    0.00     378/378         read_pgm_file [3]
                0.00    0.02     341/341         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     355/355         main [1]
[2]     76.2    0.48    0.00     355         create_histogram [2]
-----------------------------------------------
                0.13    0.00     378/378         main [1]
[3]     20.6    0.13    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00    6144/6144        find_closest [5]
[4]      3.2    0.02    0.00    6144         distance [4]
-----------------------------------------------
                0.00    0.02     341/341         main [1]
[5]      3.2    0.00    0.02     341         find_closest [5]
                0.02    0.00    6144/6144        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 83.17      0.49     0.49      355     1.38     1.38  create_histogram
 13.58      0.57     0.08      396     0.20     0.20  read_pgm_file
  3.39      0.59     0.02    11634     0.00     0.00  distance
  0.00      0.59     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.59     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.59     0.00      324     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.69% of 0.59 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.59                 main [1]
                0.49    0.00     355/355         create_histogram [2]
                0.08    0.00     396/396         read_pgm_file [3]
                0.00    0.02     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     355/355         main [1]
[2]     83.1    0.49    0.00     355         create_histogram [2]
-----------------------------------------------
                0.08    0.00     396/396         main [1]
[3]     13.6    0.08    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11634/11634       find_closest [5]
[4]      3.4    0.02    0.00   11634         distance [4]
-----------------------------------------------
                0.00    0.02     324/324         main [1]
[5]      3.4    0.00    0.02     324         find_closest [5]
                0.02    0.00   11634/11634       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 72.76      0.47     0.47      357     1.30     1.30  create_histogram
 17.21      0.58     0.11      450     0.24     0.24  read_pgm_file
  9.39      0.64     0.06    24203     0.00     0.00  distance
  0.00      0.64     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.64     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.64     0.00      270     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.57% of 0.64 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.64                 main [1]
                0.47    0.00     357/357         create_histogram [2]
                0.11    0.00     450/450         read_pgm_file [3]
                0.00    0.06     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.47    0.00     357/357         main [1]
[2]     73.2    0.47    0.00     357         create_histogram [2]
-----------------------------------------------
                0.11    0.00     450/450         main [1]
[3]     17.3    0.11    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   24203/24203       find_closest [5]
[4]      9.4    0.06    0.00   24203         distance [4]
-----------------------------------------------
                0.00    0.06     270/270         main [1]
[5]      9.4    0.00    0.06     270         find_closest [5]
                0.06    0.00   24203/24203       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 63.73      0.49     0.49      358     1.37     1.37  create_histogram
 26.01      0.69     0.20      486     0.41     0.41  read_pgm_file
 10.40      0.77     0.08    29315     0.00     0.00  distance
  0.00      0.77     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.77     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.77     0.00      234     0.00     0.34  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.30% of 0.77 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.77                 main [1]
                0.49    0.00     358/358         create_histogram [2]
                0.20    0.00     486/486         read_pgm_file [3]
                0.00    0.08     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     358/358         main [1]
[2]     63.6    0.49    0.00     358         create_histogram [2]
-----------------------------------------------
                0.20    0.00     486/486         main [1]
[3]     26.0    0.20    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   29315/29315       find_closest [5]
[4]     10.4    0.08    0.00   29315         distance [4]
-----------------------------------------------
                0.00    0.08     234/234         main [1]
[5]     10.4    0.00    0.08     234         find_closest [5]
                0.08    0.00   29315/29315       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 64.09      0.48     0.48      353     1.36     1.36  create_histogram
 22.70      0.65     0.17      540     0.32     0.32  read_pgm_file
 13.35      0.75     0.10    32196     0.00     0.00  distance
  0.00      0.75     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.75     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.75     0.00      180     0.00     0.56  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.33% of 0.75 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.75                 main [1]
                0.48    0.00     353/353         create_histogram [2]
                0.17    0.00     540/540         read_pgm_file [3]
                0.00    0.10     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     353/353         main [1]
[2]     64.0    0.48    0.00     353         create_histogram [2]
-----------------------------------------------
                0.17    0.00     540/540         main [1]
[3]     22.7    0.17    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.10    0.00   32196/32196       find_closest [5]
[4]     13.3    0.10    0.00   32196         distance [4]
-----------------------------------------------
                0.00    0.10     180/180         main [1]
[5]     13.3    0.00    0.10     180         find_closest [5]
                0.10    0.00   32196/32196       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 88.09      0.48     0.48      359     1.33     1.33  create_histogram
  9.27      0.53     0.05      378     0.13     0.13  read_pgm_file
  1.85      0.54     0.01     6149     0.00     0.00  distance
  0.00      0.54     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.54     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.54     0.00      339     0.00     0.03  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.87% of 0.54 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.54                 main [1]
                0.48    0.00     359/359         create_histogram [2]
                0.05    0.00     378/378         read_pgm_file [3]
                0.00    0.01     339/339         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     359/359         main [1]
[2]     88.8    0.48    0.00     359         create_histogram [2]
-----------------------------------------------
                0.05    0.00     378/378         main [1]
[3]      9.3    0.05    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00    6149/6149        find_closest [5]
[4]      1.9    0.01    0.00    6149         distance [4]
-----------------------------------------------
                0.00    0.01     339/339         main [1]
[5]      1.9    0.00    0.01     339         find_closest [5]
                0.01    0.00    6149/6149        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 80.12      0.48     0.48      358     1.34     1.34  create_histogram
 16.69      0.58     0.10      396     0.25     0.25  read_pgm_file
  3.34      0.60     0.02    11644     0.00     0.00  distance
  0.00      0.60     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.60     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.60     0.00      323     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.66% of 0.60 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.60                 main [1]
                0.48    0.00     358/358         create_histogram [2]
                0.10    0.00     396/396         read_pgm_file [3]
                0.00    0.02     323/323         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     358/358         main [1]
[2]     80.0    0.48    0.00     358         create_histogram [2]
-----------------------------------------------
                0.10    0.00     396/396         main [1]
[3]     16.7    0.10    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11644/11644       find_closest [5]
[4]      3.3    0.02    0.00   11644         distance [4]
-----------------------------------------------
                0.00    0.02     323/323         main [1]
[5]      3.3    0.00    0.02     323         find_closest [5]
                0.02    0.00   11644/11644       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 73.24      0.49     0.49      359     1.37     1.37  create_histogram
 17.94      0.61     0.12      450     0.27     0.27  read_pgm_file
  8.97      0.67     0.06    24214     0.00     0.00  distance
  0.00      0.67     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.67     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.67     0.00      270     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.49% of 0.67 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.67                 main [1]
                0.49    0.00     359/359         create_histogram [2]
                0.12    0.00     450/450         read_pgm_file [3]
                0.00    0.06     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     359/359         main [1]
[2]     73.1    0.49    0.00     359         create_histogram [2]
-----------------------------------------------
                0.12    0.00     450/450         main [1]
[3]     17.9    0.12    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   24214/24214       find_closest [5]
[4]      9.0    0.06    0.00   24214         distance [4]
-----------------------------------------------
                0.00    0.06     270/270         main [1]
[5]      9.0    0.00    0.06     270         find_closest [5]
                0.06    0.00   24214/24214       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 67.84      0.42     0.42      358     1.17     1.17  create_histogram
 17.77      0.53     0.11    29281     0.00     0.00  distance
 14.54      0.62     0.09      486     0.19     0.19  read_pgm_file
  0.00      0.62     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.62     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.62     0.00      233     0.00     0.47  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.61% of 0.62 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.62                 main [1]
                0.42    0.00     358/358         create_histogram [2]
                0.00    0.11     233/233         find_closest [4]
                0.09    0.00     486/486         read_pgm_file [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.42    0.00     358/358         main [1]
[2]     67.7    0.42    0.00     358         create_histogram [2]
-----------------------------------------------
                0.11    0.00   29281/29281       find_closest [4]
[3]     17.7    0.11    0.00   29281         distance [3]
-----------------------------------------------
                0.00    0.11     233/233         main [1]
[4]     17.7    0.00    0.11     233         find_closest [4]
                0.11    0.00   29281/29281       distance [3]
-----------------------------------------------
                0.09    0.00     486/486         main [1]
[5]     14.5    0.09    0.00     486         read_pgm_file [5]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [5]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [4] find_closest
   [2] create_histogram        [3] distance                [5] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 62.16      0.36     0.36      359     1.00     1.00  create_histogram
 22.45      0.49     0.13      540     0.24     0.26  read_pgm_file
 13.81      0.57     0.08    32252     0.00     0.00  distance
  1.73      0.58     0.01      541     0.02     0.02  alloc_2d_matrix
  0.00      0.58     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.58     0.00      180     0.00     0.45  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.72% of 0.58 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.58                 main [1]
                0.36    0.00     359/359         create_histogram [2]
                0.13    0.01     540/540         read_pgm_file [3]
                0.00    0.08     180/180         find_closest [5]
                0.00    0.00       1/541         alloc_2d_matrix [6]
                0.00    0.00     542/542         dealloc_2d_matrix [7]
-----------------------------------------------
                0.36    0.00     359/359         main [1]
[2]     62.1    0.36    0.00     359         create_histogram [2]
-----------------------------------------------
                0.13    0.01     540/540         main [1]
[3]     24.1    0.13    0.01     540         read_pgm_file [3]
                0.01    0.00     540/541         alloc_2d_matrix [6]
-----------------------------------------------
                0.08    0.00   32252/32252       find_closest [5]
[4]     13.8    0.08    0.00   32252         distance [4]
-----------------------------------------------
                0.00    0.08     180/180         main [1]
[5]     13.8    0.00    0.08     180         find_closest [5]
                0.08    0.00   32252/32252       distance [4]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.01    0.00     540/541         read_pgm_file [3]
[6]      1.7    0.01    0.00     541         alloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[7]      0.0    0.00    0.00     542         dealloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] alloc_2d_matrix         [7] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 78.08      0.46     0.46      359     1.28     1.28  create_histogram
 20.37      0.58     0.12      378     0.32     0.32  read_pgm_file
  1.70      0.59     0.01     6147     0.00     0.00  distance
  0.00      0.59     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.59     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.59     0.00      342     0.00     0.03  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.69% of 0.59 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.59                 main [1]
                0.46    0.00     359/359         create_histogram [2]
                0.12    0.00     378/378         read_pgm_file [3]
                0.00    0.01     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.46    0.00     359/359         main [1]
[2]     78.0    0.46    0.00     359         create_histogram [2]
-----------------------------------------------
                0.12    0.00     378/378         main [1]
[3]     20.3    0.12    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00    6147/6147        find_closest [5]
[4]      1.7    0.01    0.00    6147         distance [4]
-----------------------------------------------
                0.00    0.01     342/342         main [1]
[5]      1.7    0.00    0.01     342         find_closest [5]
                0.01    0.00    6147/6147        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 84.33      0.48     0.48      360     1.34     1.34  create_histogram
 10.54      0.54     0.06      396     0.15     0.15  read_pgm_file
  3.51      0.56     0.02    11636     0.00     0.00  distance
  1.76      0.57     0.01      324     0.03     0.09  find_closest
  0.00      0.57     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      397     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.48    0.00     360/360         create_histogram [2]
                0.06    0.00     396/396         read_pgm_file [3]
                0.01    0.02     324/324         find_closest [4]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     360/360         main [1]
[2]     84.2    0.48    0.00     360         create_histogram [2]
-----------------------------------------------
                0.06    0.00     396/396         main [1]
[3]     10.5    0.06    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.02     324/324         main [1]
[4]      5.3    0.01    0.02     324         find_closest [4]
                0.02    0.00   11636/11636       distance [5]
-----------------------------------------------
                0.02    0.00   11636/11636       find_closest [4]
[5]      3.5    0.02    0.00   11636         distance [5]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [4] find_closest
   [2] create_histogram        [5] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 66.76      0.42     0.42      359     1.17     1.17  create_histogram
 20.66      0.55     0.13      450     0.29     0.29  read_pgm_file
 12.72      0.63     0.08    24167     0.00     0.00  distance
  0.00      0.63     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      270     0.00     0.30  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.42    0.00     359/359         create_histogram [2]
                0.13    0.00     450/450         read_pgm_file [3]
                0.00    0.08     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.42    0.00     359/359         main [1]
[2]     66.7    0.42    0.00     359         create_histogram [2]
-----------------------------------------------
                0.13    0.00     450/450         main [1]
[3]     20.6    0.13    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   24167/24167       find_closest [5]
[4]     12.7    0.08    0.00   24167         distance [4]
-----------------------------------------------
                0.00    0.08     270/270         main [1]
[5]     12.7    0.00    0.08     270         find_closest [5]
                0.08    0.00   24167/24167       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 67.31      0.41     0.41      360     1.14     1.14  create_histogram
 19.70      0.53     0.12      486     0.25     0.25  read_pgm_file
 13.13      0.61     0.08    29357     0.00     0.00  distance
  0.00      0.61     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.61     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.61     0.00      233     0.00     0.34  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.64% of 0.61 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.61                 main [1]
                0.41    0.00     360/360         create_histogram [2]
                0.12    0.00     486/486         read_pgm_file [3]
                0.00    0.08     233/233         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.41    0.00     360/360         main [1]
[2]     67.2    0.41    0.00     360         create_histogram [2]
-----------------------------------------------
                0.12    0.00     486/486         main [1]
[3]     19.7    0.12    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   29357/29357       find_closest [5]
[4]     13.1    0.08    0.00   29357         distance [4]
-----------------------------------------------
                0.00    0.08     233/233         main [1]
[5]     13.1    0.00    0.08     233         find_closest [5]
                0.08    0.00   29357/29357       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 67.84      0.42     0.42      360     1.17     1.17  create_histogram
 25.84      0.58     0.16      540     0.30     0.30  read_pgm_file
  6.46      0.62     0.04    32228     0.00     0.00  distance
  0.00      0.62     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.62     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.62     0.00      180     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.61% of 0.62 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.62                 main [1]
                0.42    0.00     360/360         create_histogram [2]
                0.16    0.00     540/540         read_pgm_file [3]
                0.00    0.04     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.42    0.00     360/360         main [1]
[2]     67.7    0.42    0.00     360         create_histogram [2]
-----------------------------------------------
                0.16    0.00     540/540         main [1]
[3]     25.8    0.16    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.04    0.00   32228/32228       find_closest [5]
[4]      6.5    0.04    0.00   32228         distance [4]
-----------------------------------------------
                0.00    0.04     180/180         main [1]
[5]      6.5    0.00    0.04     180         find_closest [5]
                0.04    0.00   32228/32228       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.23      0.46     0.46      360     1.27     1.27  create_histogram
 18.67      0.57     0.11      378     0.29     0.29  read_pgm_file
  3.39      0.59     0.02     6152     0.00     0.00  distance
  0.00      0.59     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.59     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.59     0.00      342     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.71% of 0.59 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.59                 main [1]
                0.46    0.00     360/360         create_histogram [2]
                0.11    0.00     378/378         read_pgm_file [3]
                0.00    0.02     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.46    0.00     360/360         main [1]
[2]     77.8    0.46    0.00     360         create_histogram [2]
-----------------------------------------------
                0.11    0.00     378/378         main [1]
[3]     18.8    0.11    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00    6152/6152        find_closest [5]
[4]      3.4    0.02    0.00    6152         distance [4]
-----------------------------------------------
                0.00    0.02     342/342         main [1]
[5]      3.4    0.00    0.02     342         find_closest [5]
                0.02    0.00    6152/6152        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 79.78      0.47     0.47      359     1.31     1.31  create_histogram
 16.97      0.57     0.10      396     0.25     0.25  read_pgm_file
  3.39      0.59     0.02    11656     0.00     0.00  distance
  0.00      0.59     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.59     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.59     0.00      323     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.69% of 0.59 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.59                 main [1]
                0.47    0.00     359/359         create_histogram [2]
                0.10    0.00     396/396         read_pgm_file [3]
                0.00    0.02     323/323         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.47    0.00     359/359         main [1]
[2]     79.7    0.47    0.00     359         create_histogram [2]
-----------------------------------------------
                0.10    0.00     396/396         main [1]
[3]     16.9    0.10    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11656/11656       find_closest [5]
[4]      3.4    0.02    0.00   11656         distance [4]
-----------------------------------------------
                0.00    0.02     323/323         main [1]
[5]      3.4    0.00    0.02     323         find_closest [5]
                0.02    0.00   11656/11656       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 64.50      0.38     0.38      360     1.06     1.06  create_histogram
 20.37      0.50     0.12      450     0.27     0.27  read_pgm_file
 15.28      0.59     0.09    24233     0.00     0.00  distance
  0.00      0.59     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.59     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.59     0.00      269     0.00     0.34  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.69% of 0.59 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.59                 main [1]
                0.38    0.00     360/360         create_histogram [2]
                0.12    0.00     450/450         read_pgm_file [3]
                0.00    0.09     269/269         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.38    0.00     360/360         main [1]
[2]     64.4    0.38    0.00     360         create_histogram [2]
-----------------------------------------------
                0.12    0.00     450/450         main [1]
[3]     20.3    0.12    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.09    0.00   24233/24233       find_closest [5]
[4]     15.3    0.09    0.00   24233         distance [4]
-----------------------------------------------
                0.00    0.09     269/269         main [1]
[5]     15.3    0.00    0.09     269         find_closest [5]
                0.09    0.00   24233/24233       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 74.18      0.40     0.40      360     1.11     1.11  create_histogram
 12.98      0.47     0.07    29332     0.00     0.00  distance
 12.98      0.54     0.07      486     0.14     0.14  read_pgm_file
  0.00      0.54     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.54     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.54     0.00      234     0.00     0.30  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.85% of 0.54 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.54                 main [1]
                0.40    0.00     360/360         create_histogram [2]
                0.07    0.00     486/486         read_pgm_file [4]
                0.00    0.07     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.40    0.00     360/360         main [1]
[2]     74.1    0.40    0.00     360         create_histogram [2]
-----------------------------------------------
                0.07    0.00   29332/29332       find_closest [5]
[3]     13.0    0.07    0.00   29332         distance [3]
-----------------------------------------------
                0.07    0.00     486/486         main [1]
[4]     13.0    0.07    0.00     486         read_pgm_file [4]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.00    0.07     234/234         main [1]
[5]     13.0    0.00    0.07     234         find_closest [5]
                0.07    0.00   29332/29332       distance [3]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [4]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [3] distance                [4] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 54.87      0.40     0.40      356     1.13     1.13  create_histogram
 37.04      0.67     0.27      540     0.50     0.50  read_pgm_file
  8.23      0.73     0.06    32189     0.00     0.00  distance
  0.00      0.73     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.73     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.73     0.00      180     0.00     0.33  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.37% of 0.73 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.73                 main [1]
                0.40    0.00     356/356         create_histogram [2]
                0.27    0.00     540/540         read_pgm_file [3]
                0.00    0.06     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.40    0.00     356/356         main [1]
[2]     54.8    0.40    0.00     356         create_histogram [2]
-----------------------------------------------
                0.27    0.00     540/540         main [1]
[3]     37.0    0.27    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   32189/32189       find_closest [5]
[4]      8.2    0.06    0.00   32189         distance [4]
-----------------------------------------------
                0.00    0.06     180/180         main [1]
[5]      8.2    0.00    0.06     180         find_closest [5]
                0.06    0.00   32189/32189       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=1

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 79.06      0.45     0.45      360     1.25     1.25  create_histogram
 15.81      0.54     0.09      378     0.24     0.24  read_pgm_file
  5.27      0.57     0.03     6153     0.00     0.00  distance
  0.00      0.57     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.57     0.00      342     0.00     0.09  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.45    0.00     360/360         create_histogram [2]
                0.09    0.00     378/378         read_pgm_file [3]
                0.00    0.03     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.45    0.00     360/360         main [1]
[2]     78.9    0.45    0.00     360         create_histogram [2]
-----------------------------------------------
                0.09    0.00     378/378         main [1]
[3]     15.8    0.09    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.03    0.00    6153/6153        find_closest [5]
[4]      5.3    0.03    0.00    6153         distance [4]
-----------------------------------------------
                0.00    0.03     342/342         main [1]
[5]      5.3    0.00    0.03     342         find_closest [5]
                0.03    0.00    6153/6153        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=2

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.89      0.49     0.49      360     1.36     1.36  create_histogram
 17.49      0.60     0.11      396     0.28     0.28  read_pgm_file
  4.77      0.63     0.03    11655     0.00     0.00  distance
  0.00      0.63     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      324     0.00     0.09  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.49    0.00     360/360         create_histogram [2]
                0.11    0.00     396/396         read_pgm_file [3]
                0.00    0.03     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     360/360         main [1]
[2]     77.8    0.49    0.00     360         create_histogram [2]
-----------------------------------------------
                0.11    0.00     396/396         main [1]
[3]     17.5    0.11    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.03    0.00   11655/11655       find_closest [5]
[4]      4.8    0.03    0.00   11655         distance [4]
-----------------------------------------------
                0.00    0.03     324/324         main [1]
[5]      4.8    0.00    0.03     324         find_closest [5]
                0.03    0.00   11655/11655       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=5

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 58.42      0.35     0.35      358   979.06   979.06  create_histogram
 23.37      0.49     0.14      450   311.56   311.56  read_pgm_file
 18.36      0.60     0.11    24216     4.55     4.55  distance
  0.00      0.60     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.60     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.60     0.00      269     0.00   409.51  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.66% of 0.60 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.60                 main [1]
                0.35    0.00     358/358         create_histogram [2]
                0.14    0.00     450/450         read_pgm_file [3]
                0.00    0.11     269/269         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.35    0.00     358/358         main [1]
[2]     58.3    0.35    0.00     358         create_histogram [2]
-----------------------------------------------
                0.14    0.00     450/450         main [1]
[3]     23.3    0.14    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.11    0.00   24216/24216       find_closest [5]
[4]     18.3    0.11    0.00   24216         distance [4]
-----------------------------------------------
                0.00    0.11     269/269         main [1]
[5]     18.3    0.00    0.11     269         find_closest [5]
                0.11    0.00   24216/24216       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=7

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 56.56      0.31     0.31      358   853.18   853.18  create_histogram
 22.25      0.43     0.12      486   247.27   247.27  read_pgm_file
 20.40      0.54     0.11    29344     3.75     3.75  distance
  0.00      0.54     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.54     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.54     0.00      233     0.00   472.78  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.87% of 0.54 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.54                 main [1]
                0.31    0.00     358/358         create_histogram [2]
                0.12    0.00     486/486         read_pgm_file [3]
                0.00    0.11     233/233         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.31    0.00     358/358         main [1]
[2]     57.0    0.31    0.00     358         create_histogram [2]
-----------------------------------------------
                0.12    0.00     486/486         main [1]
[3]     22.4    0.12    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.11    0.00   29344/29344       find_closest [5]
[4]     20.6    0.11    0.00   29344         distance [4]
-----------------------------------------------
                0.00    0.11     233/233         main [1]
[5]     20.6    0.00    0.11     233         find_closest [5]
                0.11    0.00   29344/29344       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


k=10

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 66.76      0.32     0.32      359   892.65   892.65  create_histogram
 25.04      0.44     0.12      540   222.54   222.54  read_pgm_file
  8.35      0.48     0.04    32185     1.24     1.24  distance
  0.00      0.48     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.48     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.48     0.00      180     0.00   222.54  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 2.08% of 0.48 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.48                 main [1]
                0.32    0.00     359/359         create_histogram [2]
                0.12    0.00     540/540         read_pgm_file [3]
                0.00    0.04     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.32    0.00     359/359         main [1]
[2]     66.7    0.32    0.00     359         create_histogram [2]
-----------------------------------------------
                0.12    0.00     540/540         main [1]
[3]     25.0    0.12    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.04    0.00   32185/32185       find_closest [5]
[4]      8.3    0.04    0.00   32185         distance [4]
-----------------------------------------------
                0.00    0.04     180/180         main [1]
[5]      8.3    0.00    0.04     180         find_closest [5]
                0.04    0.00   32185/32185       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


