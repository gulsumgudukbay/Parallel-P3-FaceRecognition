Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 75.49      0.49     0.49      360     1.36     1.36  create_histogram
 23.11      0.64     0.15      378     0.40     0.40  read_pgm_file
  1.54      0.65     0.01     6156     0.00     0.00  distance
  0.00      0.65     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.65     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.65     0.00      342     0.00     0.03  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.54% of 0.65 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.65                 main [1]
                0.49    0.00     360/360         create_histogram [2]
                0.15    0.00     378/378         read_pgm_file [3]
                0.00    0.01     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     360/360         main [1]
[2]     75.4    0.49    0.00     360         create_histogram [2]
-----------------------------------------------
                0.15    0.00     378/378         main [1]
[3]     23.1    0.15    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00    6156/6156        find_closest [5]
[4]      1.5    0.01    0.00    6156         distance [4]
-----------------------------------------------
                0.00    0.01     342/342         main [1]
[5]      1.5    0.00    0.01     342         find_closest [5]
                0.01    0.00    6156/6156        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 80.12      0.48     0.48      360     1.34     1.34  create_histogram
 13.35      0.56     0.08      396     0.20     0.20  read_pgm_file
  6.68      0.60     0.04    11664     0.00     0.00  distance
  0.00      0.60     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.60     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.60     0.00      324     0.00     0.12  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.66% of 0.60 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.60                 main [1]
                0.48    0.00     360/360         create_histogram [2]
                0.08    0.00     396/396         read_pgm_file [3]
                0.00    0.04     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     360/360         main [1]
[2]     80.0    0.48    0.00     360         create_histogram [2]
-----------------------------------------------
                0.08    0.00     396/396         main [1]
[3]     13.3    0.08    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.04    0.00   11664/11664       find_closest [5]
[4]      6.7    0.04    0.00   11664         distance [4]
-----------------------------------------------
                0.00    0.04     324/324         main [1]
[5]      6.7    0.00    0.04     324         find_closest [5]
                0.04    0.00   11664/11664       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 74.71      0.47     0.47      360     1.31     1.31  create_histogram
 15.90      0.57     0.10      450     0.22     0.22  read_pgm_file
  9.54      0.63     0.06    24300     0.00     0.00  distance
  0.00      0.63     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      270     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.47    0.00     360/360         create_histogram [2]
                0.10    0.00     450/450         read_pgm_file [3]
                0.00    0.06     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.47    0.00     360/360         main [1]
[2]     74.6    0.47    0.00     360         create_histogram [2]
-----------------------------------------------
                0.10    0.00     450/450         main [1]
[3]     15.9    0.10    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   24300/24300       find_closest [5]
[4]      9.5    0.06    0.00   24300         distance [4]
-----------------------------------------------
                0.00    0.06     270/270         main [1]
[5]      9.5    0.00    0.06     270         find_closest [5]
                0.06    0.00   24300/24300       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.38      0.51     0.51      360     1.42     1.42  create_histogram
 13.66      0.60     0.09      486     0.19     0.19  read_pgm_file
  9.10      0.66     0.06    29484     0.00     0.00  distance
  0.00      0.66     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.66     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.66     0.00      234     0.00     0.26  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.51% of 0.66 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.66                 main [1]
                0.51    0.00     360/360         create_histogram [2]
                0.09    0.00     486/486         read_pgm_file [3]
                0.00    0.06     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.51    0.00     360/360         main [1]
[2]     77.3    0.51    0.00     360         create_histogram [2]
-----------------------------------------------
                0.09    0.00     486/486         main [1]
[3]     13.6    0.09    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   29484/29484       find_closest [5]
[4]      9.1    0.06    0.00   29484         distance [4]
-----------------------------------------------
                0.00    0.06     234/234         main [1]
[5]      9.1    0.00    0.06     234         find_closest [5]
                0.06    0.00   29484/29484       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 68.67      0.48     0.48      360     1.34     1.34  create_histogram
 21.46      0.63     0.15      540     0.28     0.28  read_pgm_file
 10.01      0.70     0.07    32400     0.00     0.00  distance
  0.00      0.70     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.70     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.70     0.00      180     0.00     0.39  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.43% of 0.70 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.70                 main [1]
                0.48    0.00     360/360         create_histogram [2]
                0.15    0.00     540/540         read_pgm_file [3]
                0.00    0.07     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     360/360         main [1]
[2]     68.6    0.48    0.00     360         create_histogram [2]
-----------------------------------------------
                0.15    0.00     540/540         main [1]
[3]     21.4    0.15    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.07    0.00   32400/32400       find_closest [5]
[4]     10.0    0.07    0.00   32400         distance [4]
-----------------------------------------------
                0.00    0.07     180/180         main [1]
[5]     10.0    0.00    0.07     180         find_closest [5]
                0.07    0.00   32400/32400       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.89      0.49     0.49      356     1.38     1.38  create_histogram
 17.49      0.60     0.11      378     0.29     0.29  read_pgm_file
  4.77      0.63     0.03     6147     0.00     0.00  distance
  0.00      0.63     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      342     0.00     0.09  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.49    0.00     356/356         create_histogram [2]
                0.11    0.00     378/378         read_pgm_file [3]
                0.00    0.03     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     356/356         main [1]
[2]     77.8    0.49    0.00     356         create_histogram [2]
-----------------------------------------------
                0.11    0.00     378/378         main [1]
[3]     17.5    0.11    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.03    0.00    6147/6147        find_closest [5]
[4]      4.8    0.03    0.00    6147         distance [4]
-----------------------------------------------
                0.00    0.03     342/342         main [1]
[5]      4.8    0.00    0.03     342         find_closest [5]
                0.03    0.00    6147/6147        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 77.89      0.49     0.49      356     1.38     1.38  create_histogram
 19.08      0.61     0.12      396     0.30     0.30  read_pgm_file
  3.18      0.63     0.02    11637     0.00     0.00  distance
  0.00      0.63     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      322     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.49    0.00     356/356         create_histogram [2]
                0.12    0.00     396/396         read_pgm_file [3]
                0.00    0.02     322/322         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     356/356         main [1]
[2]     77.8    0.49    0.00     356         create_histogram [2]
-----------------------------------------------
                0.12    0.00     396/396         main [1]
[3]     19.0    0.12    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11637/11637       find_closest [5]
[4]      3.2    0.02    0.00   11637         distance [4]
-----------------------------------------------
                0.00    0.02     322/322         main [1]
[5]      3.2    0.00    0.02     322         find_closest [5]
                0.02    0.00   11637/11637       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 81.37      0.52     0.52      359     1.45     1.45  create_histogram
 12.52      0.60     0.08      450     0.18     0.20  read_pgm_file
  4.69      0.63     0.03    24220     0.00     0.00  distance
  1.56      0.64     0.01      451     0.02     0.02  alloc_2d_matrix
  0.00      0.64     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.64     0.00      270     0.00     0.11  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.56% of 0.64 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.64                 main [1]
                0.52    0.00     359/359         create_histogram [2]
                0.08    0.01     450/450         read_pgm_file [3]
                0.00    0.03     270/270         find_closest [5]
                0.00    0.00       1/451         alloc_2d_matrix [6]
                0.00    0.00     452/452         dealloc_2d_matrix [7]
-----------------------------------------------
                0.52    0.00     359/359         main [1]
[2]     81.2    0.52    0.00     359         create_histogram [2]
-----------------------------------------------
                0.08    0.01     450/450         main [1]
[3]     14.1    0.08    0.01     450         read_pgm_file [3]
                0.01    0.00     450/451         alloc_2d_matrix [6]
-----------------------------------------------
                0.03    0.00   24220/24220       find_closest [5]
[4]      4.7    0.03    0.00   24220         distance [4]
-----------------------------------------------
                0.00    0.03     270/270         main [1]
[5]      4.7    0.00    0.03     270         find_closest [5]
                0.03    0.00   24220/24220       distance [4]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.01    0.00     450/451         read_pgm_file [3]
[6]      1.6    0.01    0.00     451         alloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[7]      0.0    0.00    0.00     452         dealloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] alloc_2d_matrix         [7] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 69.96      0.51     0.51      358     1.43     1.43  create_histogram
 19.21      0.65     0.14      486     0.29     0.29  read_pgm_file
 10.97      0.73     0.08    29305     0.00     0.00  distance
  0.00      0.73     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.73     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.73     0.00      233     0.00     0.34  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.37% of 0.73 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.73                 main [1]
                0.51    0.00     358/358         create_histogram [2]
                0.14    0.00     486/486         read_pgm_file [3]
                0.00    0.08     233/233         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.51    0.00     358/358         main [1]
[2]     69.9    0.51    0.00     358         create_histogram [2]
-----------------------------------------------
                0.14    0.00     486/486         main [1]
[3]     19.2    0.14    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   29305/29305       find_closest [5]
[4]     11.0    0.08    0.00   29305         distance [4]
-----------------------------------------------
                0.00    0.08     233/233         main [1]
[5]     11.0    0.00    0.08     233         find_closest [5]
                0.08    0.00   29305/29305       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 61.34      0.49     0.49      350     1.40     1.40  create_histogram
 28.79      0.72     0.23      540     0.43     0.43  read_pgm_file
  8.76      0.79     0.07    32047     0.00     0.00  distance
  0.00      0.79     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.79     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.79     0.00      178     0.00     0.39  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.26% of 0.79 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.79                 main [1]
                0.49    0.00     350/350         create_histogram [2]
                0.23    0.00     540/540         read_pgm_file [3]
                0.00    0.07     178/178         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     350/350         main [1]
[2]     62.0    0.49    0.00     350         create_histogram [2]
-----------------------------------------------
                0.23    0.00     540/540         main [1]
[3]     29.1    0.23    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.07    0.00   32047/32047       find_closest [5]
[4]      8.9    0.07    0.00   32047         distance [4]
-----------------------------------------------
                0.00    0.07     178/178         main [1]
[5]      8.9    0.00    0.07     178         find_closest [5]
                0.07    0.00   32047/32047       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 79.48      0.50     0.50      360     1.39     1.39  create_histogram
 17.49      0.61     0.11      378     0.29     0.29  read_pgm_file
  3.18      0.63     0.02     6147     0.00     0.00  distance
  0.00      0.63     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.63     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.63     0.00      342     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.59% of 0.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.63                 main [1]
                0.50    0.00     360/360         create_histogram [2]
                0.11    0.00     378/378         read_pgm_file [3]
                0.00    0.02     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     360/360         main [1]
[2]     79.4    0.50    0.00     360         create_histogram [2]
-----------------------------------------------
                0.11    0.00     378/378         main [1]
[3]     17.5    0.11    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00    6147/6147        find_closest [5]
[4]      3.2    0.02    0.00    6147         distance [4]
-----------------------------------------------
                0.00    0.02     342/342         main [1]
[5]      3.2    0.00    0.02     342         find_closest [5]
                0.02    0.00    6147/6147        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 79.06      0.45     0.45      360     1.25     1.25  create_histogram
 15.81      0.54     0.09      396     0.23     0.23  read_pgm_file
  5.27      0.57     0.03    11645     0.00     0.00  distance
  0.00      0.57     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.57     0.00      324     0.00     0.09  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.45    0.00     360/360         create_histogram [2]
                0.09    0.00     396/396         read_pgm_file [3]
                0.00    0.03     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.45    0.00     360/360         main [1]
[2]     78.9    0.45    0.00     360         create_histogram [2]
-----------------------------------------------
                0.09    0.00     396/396         main [1]
[3]     15.8    0.09    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.03    0.00   11645/11645       find_closest [5]
[4]      5.3    0.03    0.00   11645         distance [4]
-----------------------------------------------
                0.00    0.03     324/324         main [1]
[5]      5.3    0.00    0.03     324         find_closest [5]
                0.03    0.00   11645/11645       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 86.79      0.52     0.52      358     1.45     1.45  create_histogram
 11.68      0.59     0.07      450     0.16     0.16  read_pgm_file
  1.67      0.60     0.01    24175     0.00     0.00  distance
  0.00      0.60     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.60     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.60     0.00      266     0.00     0.04  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.66% of 0.60 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.60                 main [1]
                0.52    0.00     358/358         create_histogram [2]
                0.07    0.00     450/450         read_pgm_file [3]
                0.00    0.01     266/266         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.52    0.00     358/358         main [1]
[2]     86.7    0.52    0.00     358         create_histogram [2]
-----------------------------------------------
                0.07    0.00     450/450         main [1]
[3]     11.7    0.07    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00   24175/24175       find_closest [5]
[4]      1.7    0.01    0.00   24175         distance [4]
-----------------------------------------------
                0.00    0.01     266/266         main [1]
[5]      1.7    0.00    0.01     266         find_closest [5]
                0.01    0.00   24175/24175       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 68.15      0.49     0.49      358     1.37     1.37  create_histogram
 20.86      0.64     0.15      486     0.31     0.31  read_pgm_file
 11.13      0.72     0.08    29350     0.00     0.00  distance
  0.00      0.72     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.72     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.72     0.00      234     0.00     0.34  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.39% of 0.72 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.72                 main [1]
                0.49    0.00     358/358         create_histogram [2]
                0.15    0.00     486/486         read_pgm_file [3]
                0.00    0.08     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.49    0.00     358/358         main [1]
[2]     68.1    0.49    0.00     358         create_histogram [2]
-----------------------------------------------
                0.15    0.00     486/486         main [1]
[3]     20.8    0.15    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   29350/29350       find_closest [5]
[4]     11.1    0.08    0.00   29350         distance [4]
-----------------------------------------------
                0.00    0.08     234/234         main [1]
[5]     11.1    0.00    0.08     234         find_closest [5]
                0.08    0.00   29350/29350       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 65.54      0.45     0.45      357     1.25     1.25  create_histogram
 23.56      0.61     0.16      540     0.30     0.30  read_pgm_file
 10.31      0.68     0.07    32181     0.00     0.00  distance
  0.00      0.68     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.68     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.68     0.00      180     0.00     0.39  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.48% of 0.68 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.68                 main [1]
                0.45    0.00     357/357         create_histogram [2]
                0.16    0.00     540/540         read_pgm_file [3]
                0.00    0.07     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.45    0.00     357/357         main [1]
[2]     65.9    0.45    0.00     357         create_histogram [2]
-----------------------------------------------
                0.16    0.00     540/540         main [1]
[3]     23.7    0.16    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.07    0.00   32181/32181       find_closest [5]
[4]     10.4    0.07    0.00   32181         distance [4]
-----------------------------------------------
                0.00    0.07     180/180         main [1]
[5]     10.4    0.00    0.07     180         find_closest [5]
                0.07    0.00   32181/32181       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 81.60      0.44     0.44      359     1.23     1.23  create_histogram
 12.98      0.51     0.07      378     0.19     0.19  read_pgm_file
  5.56      0.54     0.03     6155     0.00     0.00  distance
  0.00      0.54     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.54     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.54     0.00      342     0.00     0.09  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.85% of 0.54 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.54                 main [1]
                0.44    0.00     359/359         create_histogram [2]
                0.07    0.00     378/378         read_pgm_file [3]
                0.00    0.03     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.44    0.00     359/359         main [1]
[2]     81.5    0.44    0.00     359         create_histogram [2]
-----------------------------------------------
                0.07    0.00     378/378         main [1]
[3]     13.0    0.07    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.03    0.00    6155/6155        find_closest [5]
[4]      5.6    0.03    0.00    6155         distance [4]
-----------------------------------------------
                0.00    0.03     342/342         main [1]
[5]      5.6    0.00    0.03     342         find_closest [5]
                0.03    0.00    6155/6155        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 87.85      0.50     0.50      359     1.39     1.39  create_histogram
  8.78      0.55     0.05      396     0.13     0.13  read_pgm_file
  3.51      0.57     0.02    11633     0.00     0.00  distance
  0.00      0.57     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.57     0.00      323     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.50    0.00     359/359         create_histogram [2]
                0.05    0.00     396/396         read_pgm_file [3]
                0.00    0.02     323/323         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     359/359         main [1]
[2]     87.7    0.50    0.00     359         create_histogram [2]
-----------------------------------------------
                0.05    0.00     396/396         main [1]
[3]      8.8    0.05    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11633/11633       find_closest [5]
[4]      3.5    0.02    0.00   11633         distance [4]
-----------------------------------------------
                0.00    0.02     323/323         main [1]
[5]      3.5    0.00    0.02     323         find_closest [5]
                0.02    0.00   11633/11633       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 73.95      0.48     0.48      359     1.34     1.34  create_histogram
 16.95      0.59     0.11      450     0.24     0.24  read_pgm_file
  9.24      0.65     0.06    24238     0.00     0.00  distance
  0.00      0.65     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.65     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.65     0.00      269     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.54% of 0.65 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.65                 main [1]
                0.48    0.00     359/359         create_histogram [2]
                0.11    0.00     450/450         read_pgm_file [3]
                0.00    0.06     269/269         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.48    0.00     359/359         main [1]
[2]     73.8    0.48    0.00     359         create_histogram [2]
-----------------------------------------------
                0.11    0.00     450/450         main [1]
[3]     16.9    0.11    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.06    0.00   24238/24238       find_closest [5]
[4]      9.2    0.06    0.00   24238         distance [4]
-----------------------------------------------
                0.00    0.06     269/269         main [1]
[5]      9.2    0.00    0.06     269         find_closest [5]
                0.06    0.00   24238/24238       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 62.28      0.51     0.51      360     1.42     1.42  create_histogram
 25.65      0.72     0.21      486     0.43     0.43  read_pgm_file
 12.21      0.82     0.10    29336     0.00     0.00  distance
  0.00      0.82     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.82     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.82     0.00      234     0.00     0.43  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.22% of 0.82 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.82                 main [1]
                0.51    0.00     360/360         create_histogram [2]
                0.21    0.00     486/486         read_pgm_file [3]
                0.00    0.10     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.51    0.00     360/360         main [1]
[2]     62.2    0.51    0.00     360         create_histogram [2]
-----------------------------------------------
                0.21    0.00     486/486         main [1]
[3]     25.6    0.21    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.10    0.00   29336/29336       find_closest [5]
[4]     12.2    0.10    0.00   29336         distance [4]
-----------------------------------------------
                0.00    0.10     234/234         main [1]
[5]     12.2    0.00    0.10     234         find_closest [5]
                0.10    0.00   29336/29336       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.80      0.35     0.35      358   979.06   979.06  create_histogram
 26.12      0.53     0.18      540   333.81   333.81  read_pgm_file
 23.22      0.69     0.16    32187     4.98     4.98  distance
  0.00      0.69     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.69     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.69     0.00      179     0.00   895.14  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.45% of 0.69 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.69                 main [1]
                0.35    0.00     358/358         create_histogram [2]
                0.18    0.00     540/540         read_pgm_file [3]
                0.00    0.16     179/179         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.35    0.00     358/358         main [1]
[2]     50.7    0.35    0.00     358         create_histogram [2]
-----------------------------------------------
                0.18    0.00     540/540         main [1]
[3]     26.1    0.18    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.16    0.00   32187/32187       find_closest [5]
[4]     23.2    0.16    0.00   32187         distance [4]
-----------------------------------------------
                0.00    0.16     179/179         main [1]
[5]     23.2    0.00    0.16     179         find_closest [5]
                0.16    0.00   32187/32187       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 76.47      0.42     0.42      360     1.17     1.17  create_histogram
 14.57      0.50     0.08      378     0.21     0.24  read_pgm_file
  7.28      0.54     0.04     6156     0.01     0.01  distance
  1.82      0.55     0.01      379     0.03     0.03  alloc_2d_matrix
  0.00      0.55     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.55     0.00      342     0.00     0.12  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.82% of 0.55 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.55                 main [1]
                0.42    0.00     360/360         create_histogram [2]
                0.08    0.01     378/378         read_pgm_file [3]
                0.00    0.04     342/342         find_closest [5]
                0.00    0.00       1/379         alloc_2d_matrix [6]
                0.00    0.00     380/380         dealloc_2d_matrix [7]
-----------------------------------------------
                0.42    0.00     360/360         main [1]
[2]     76.4    0.42    0.00     360         create_histogram [2]
-----------------------------------------------
                0.08    0.01     378/378         main [1]
[3]     16.4    0.08    0.01     378         read_pgm_file [3]
                0.01    0.00     378/379         alloc_2d_matrix [6]
-----------------------------------------------
                0.04    0.00    6156/6156        find_closest [5]
[4]      7.3    0.04    0.00    6156         distance [4]
-----------------------------------------------
                0.00    0.04     342/342         main [1]
[5]      7.3    0.00    0.04     342         find_closest [5]
                0.04    0.00    6156/6156        distance [4]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.01    0.00     378/379         read_pgm_file [3]
[6]      1.8    0.01    0.00     379         alloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[7]      0.0    0.00    0.00     380         dealloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] alloc_2d_matrix         [7] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 78.24      0.50     0.50      360     1.39     1.39  create_histogram
 20.34      0.63     0.13      396     0.33     0.33  read_pgm_file
  1.56      0.64     0.01    11640     0.00     0.00  distance
  0.00      0.64     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.64     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.64     0.00      324     0.00     0.03  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.56% of 0.64 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.64                 main [1]
                0.50    0.00     360/360         create_histogram [2]
                0.13    0.00     396/396         read_pgm_file [3]
                0.00    0.01     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     360/360         main [1]
[2]     78.1    0.50    0.00     360         create_histogram [2]
-----------------------------------------------
                0.13    0.00     396/396         main [1]
[3]     20.3    0.13    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.01    0.00   11640/11640       find_closest [5]
[4]      1.6    0.01    0.00   11640         distance [4]
-----------------------------------------------
                0.00    0.01     324/324         main [1]
[5]      1.6    0.00    0.01     324         find_closest [5]
                0.01    0.00   11640/11640       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 72.03      0.41     0.41      360     1.14     1.14  create_histogram
 19.33      0.52     0.11      450     0.24     0.24  read_pgm_file
  8.78      0.57     0.05    24190     0.00     0.00  distance
  0.00      0.57     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.57     0.00      270     0.00     0.19  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.41    0.00     360/360         create_histogram [2]
                0.11    0.00     450/450         read_pgm_file [3]
                0.00    0.05     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.41    0.00     360/360         main [1]
[2]     71.9    0.41    0.00     360         create_histogram [2]
-----------------------------------------------
                0.11    0.00     450/450         main [1]
[3]     19.3    0.11    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.05    0.00   24190/24190       find_closest [5]
[4]      8.8    0.05    0.00   24190         distance [4]
-----------------------------------------------
                0.00    0.05     270/270         main [1]
[5]      8.8    0.00    0.05     270         find_closest [5]
                0.05    0.00   24190/24190       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 64.03      0.39     0.39      358     1.09     1.09  create_histogram
 19.70      0.51     0.12      486     0.25     0.25  read_pgm_file
 16.42      0.61     0.10    29371     0.00     0.00  distance
  0.00      0.61     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.61     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.61     0.00      234     0.00     0.43  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.64% of 0.61 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.61                 main [1]
                0.39    0.00     358/358         create_histogram [2]
                0.12    0.00     486/486         read_pgm_file [3]
                0.00    0.10     234/234         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.39    0.00     358/358         main [1]
[2]     63.9    0.39    0.00     358         create_histogram [2]
-----------------------------------------------
                0.12    0.00     486/486         main [1]
[3]     19.7    0.12    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.10    0.00   29371/29371       find_closest [5]
[4]     16.4    0.10    0.00   29371         distance [4]
-----------------------------------------------
                0.00    0.10     234/234         main [1]
[5]     16.4    0.00    0.10     234         find_closest [5]
                0.10    0.00   29371/29371       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 61.49      0.35     0.35      358   979.06   979.06  create_histogram
 22.84      0.48     0.13      540   241.09   241.09  read_pgm_file
 15.81      0.57     0.09    32235     2.80     2.80  distance
  0.00      0.57     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.57     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.57     0.00      179     0.00   503.52  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.75% of 0.57 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.57                 main [1]
                0.35    0.00     358/358         create_histogram [2]
                0.13    0.00     540/540         read_pgm_file [3]
                0.00    0.09     179/179         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.35    0.00     358/358         main [1]
[2]     61.4    0.35    0.00     358         create_histogram [2]
-----------------------------------------------
                0.13    0.00     540/540         main [1]
[3]     22.8    0.13    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.09    0.00   32235/32235       find_closest [5]
[4]     15.8    0.09    0.00   32235         distance [4]
-----------------------------------------------
                0.00    0.09     179/179         main [1]
[5]     15.8    0.00    0.09     179         find_closest [5]
                0.09    0.00   32235/32235       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 72.57      0.50     0.50      360     1.39     1.39  create_histogram
 24.67      0.67     0.17      378     0.45     0.45  read_pgm_file
  2.90      0.69     0.02     6151     0.00     0.00  distance
  0.00      0.69     0.00      380     0.00     0.00  dealloc_2d_matrix
  0.00      0.69     0.00      379     0.00     0.00  alloc_2d_matrix
  0.00      0.69     0.00      342     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.45% of 0.69 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.69                 main [1]
                0.50    0.00     360/360         create_histogram [2]
                0.17    0.00     378/378         read_pgm_file [3]
                0.00    0.02     342/342         find_closest [5]
                0.00    0.00     380/380         dealloc_2d_matrix [6]
                0.00    0.00       1/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.50    0.00     360/360         main [1]
[2]     72.5    0.50    0.00     360         create_histogram [2]
-----------------------------------------------
                0.17    0.00     378/378         main [1]
[3]     24.6    0.17    0.00     378         read_pgm_file [3]
                0.00    0.00     378/379         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00    6151/6151        find_closest [5]
[4]      2.9    0.02    0.00    6151         distance [4]
-----------------------------------------------
                0.00    0.02     342/342         main [1]
[5]      2.9    0.00    0.02     342         find_closest [5]
                0.02    0.00    6151/6151        distance [4]
-----------------------------------------------
                0.00    0.00     380/380         main [1]
[6]      0.0    0.00    0.00     380         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/379         main [1]
                0.00    0.00     378/379         read_pgm_file [3]
[7]      0.0    0.00    0.00     379         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 79.42      0.46     0.46      359     1.28     1.28  create_histogram
 17.27      0.56     0.10      396     0.25     0.25  read_pgm_file
  3.45      0.58     0.02    11651     0.00     0.00  distance
  0.00      0.58     0.00      398     0.00     0.00  dealloc_2d_matrix
  0.00      0.58     0.00      397     0.00     0.00  alloc_2d_matrix
  0.00      0.58     0.00      324     0.00     0.06  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.72% of 0.58 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.58                 main [1]
                0.46    0.00     359/359         create_histogram [2]
                0.10    0.00     396/396         read_pgm_file [3]
                0.00    0.02     324/324         find_closest [5]
                0.00    0.00     398/398         dealloc_2d_matrix [6]
                0.00    0.00       1/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.46    0.00     359/359         main [1]
[2]     79.3    0.46    0.00     359         create_histogram [2]
-----------------------------------------------
                0.10    0.00     396/396         main [1]
[3]     17.2    0.10    0.00     396         read_pgm_file [3]
                0.00    0.00     396/397         alloc_2d_matrix [7]
-----------------------------------------------
                0.02    0.00   11651/11651       find_closest [5]
[4]      3.4    0.02    0.00   11651         distance [4]
-----------------------------------------------
                0.00    0.02     324/324         main [1]
[5]      3.4    0.00    0.02     324         find_closest [5]
                0.02    0.00   11651/11651       distance [4]
-----------------------------------------------
                0.00    0.00     398/398         main [1]
[6]      0.0    0.00    0.00     398         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/397         main [1]
                0.00    0.00     396/397         read_pgm_file [3]
[7]      0.0    0.00    0.00     397         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 69.07      0.40     0.40      360     1.11     1.11  create_histogram
 17.27      0.50     0.10      450     0.22     0.22  read_pgm_file
 13.81      0.58     0.08    24199     0.00     0.00  distance
  0.00      0.58     0.00      452     0.00     0.00  dealloc_2d_matrix
  0.00      0.58     0.00      451     0.00     0.00  alloc_2d_matrix
  0.00      0.58     0.00      270     0.00     0.30  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.72% of 0.58 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.58                 main [1]
                0.40    0.00     360/360         create_histogram [2]
                0.10    0.00     450/450         read_pgm_file [3]
                0.00    0.08     270/270         find_closest [5]
                0.00    0.00     452/452         dealloc_2d_matrix [6]
                0.00    0.00       1/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.40    0.00     360/360         main [1]
[2]     69.0    0.40    0.00     360         create_histogram [2]
-----------------------------------------------
                0.10    0.00     450/450         main [1]
[3]     17.2    0.10    0.00     450         read_pgm_file [3]
                0.00    0.00     450/451         alloc_2d_matrix [7]
-----------------------------------------------
                0.08    0.00   24199/24199       find_closest [5]
[4]     13.8    0.08    0.00   24199         distance [4]
-----------------------------------------------
                0.00    0.08     270/270         main [1]
[5]     13.8    0.00    0.08     270         find_closest [5]
                0.08    0.00   24199/24199       distance [4]
-----------------------------------------------
                0.00    0.00     452/452         main [1]
[6]      0.0    0.00    0.00     452         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/451         main [1]
                0.00    0.00     450/451         read_pgm_file [3]
[7]      0.0    0.00    0.00     451         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 65.09      0.39     0.39      358     1.09     1.09  create_histogram
 26.71      0.55     0.16      486     0.33     0.33  read_pgm_file
  8.35      0.60     0.05    29356     0.00     0.00  distance
  0.00      0.60     0.00      488     0.00     0.00  dealloc_2d_matrix
  0.00      0.60     0.00      487     0.00     0.00  alloc_2d_matrix
  0.00      0.60     0.00      233     0.00     0.21  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.66% of 0.60 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.60                 main [1]
                0.39    0.00     358/358         create_histogram [2]
                0.16    0.00     486/486         read_pgm_file [3]
                0.00    0.05     233/233         find_closest [5]
                0.00    0.00     488/488         dealloc_2d_matrix [6]
                0.00    0.00       1/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.39    0.00     358/358         main [1]
[2]     65.0    0.39    0.00     358         create_histogram [2]
-----------------------------------------------
                0.16    0.00     486/486         main [1]
[3]     26.7    0.16    0.00     486         read_pgm_file [3]
                0.00    0.00     486/487         alloc_2d_matrix [7]
-----------------------------------------------
                0.05    0.00   29356/29356       find_closest [5]
[4]      8.3    0.05    0.00   29356         distance [4]
-----------------------------------------------
                0.00    0.05     233/233         main [1]
[5]      8.3    0.00    0.05     233         find_closest [5]
                0.05    0.00   29356/29356       distance [4]
-----------------------------------------------
                0.00    0.00     488/488         main [1]
[6]      0.0    0.00    0.00     488         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/487         main [1]
                0.00    0.00     486/487         read_pgm_file [3]
[7]      0.0    0.00    0.00     487         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 71.26      0.37     0.37      358     1.04     1.04  create_histogram
 21.18      0.48     0.11      540     0.20     0.20  read_pgm_file
  7.70      0.52     0.04    32240     0.00     0.00  distance
  0.00      0.52     0.00      542     0.00     0.00  dealloc_2d_matrix
  0.00      0.52     0.00      541     0.00     0.00  alloc_2d_matrix
  0.00      0.52     0.00      180     0.00     0.22  find_closest

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.92% of 0.52 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.52                 main [1]
                0.37    0.00     358/358         create_histogram [2]
                0.11    0.00     540/540         read_pgm_file [3]
                0.00    0.04     180/180         find_closest [5]
                0.00    0.00     542/542         dealloc_2d_matrix [6]
                0.00    0.00       1/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.37    0.00     358/358         main [1]
[2]     71.2    0.37    0.00     358         create_histogram [2]
-----------------------------------------------
                0.11    0.00     540/540         main [1]
[3]     21.2    0.11    0.00     540         read_pgm_file [3]
                0.00    0.00     540/541         alloc_2d_matrix [7]
-----------------------------------------------
                0.04    0.00   32240/32240       find_closest [5]
[4]      7.7    0.04    0.00   32240         distance [4]
-----------------------------------------------
                0.00    0.04     180/180         main [1]
[5]      7.7    0.00    0.04     180         find_closest [5]
                0.04    0.00   32240/32240       distance [4]
-----------------------------------------------
                0.00    0.00     542/542         main [1]
[6]      0.0    0.00    0.00     542         dealloc_2d_matrix [6]
-----------------------------------------------
                0.00    0.00       1/541         main [1]
                0.00    0.00     540/541         read_pgm_file [3]
[7]      0.0    0.00    0.00     541         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] dealloc_2d_matrix       [5] find_closest
   [2] create_histogram        [4] distance                [3] read_pgm_file


